# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from sqlite_functions import *
from mysql_functions import *
from psql_functions import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(501, 491)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.add_Button = QtWidgets.QPushButton(self.centralwidget)
        self.add_Button.setGeometry(QtCore.QRect(50, 130, 91, 28))
        self.add_Button.setObjectName("add_Button")
        self.update_Button = QtWidgets.QPushButton(self.centralwidget)
        self.update_Button.setGeometry(QtCore.QRect(220, 130, 91, 28))
        self.update_Button.setObjectName("update_Button")
        self.delete_Button = QtWidgets.QPushButton(self.centralwidget)
        self.delete_Button.setGeometry(QtCore.QRect(380, 130, 93, 28))
        self.delete_Button.setObjectName("delete_Button")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(350, 90, 51, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(210, 50, 51, 16))
        self.label_2.setObjectName("label_2")
        self.update_id_Edit = QtWidgets.QLineEdit(self.centralwidget)
        self.update_id_Edit.setGeometry(QtCore.QRect(260, 50, 61, 22))
        self.update_id_Edit.setObjectName("update_id_Edit")
        self.delete_id_Edit = QtWidgets.QLineEdit(self.centralwidget)
        self.delete_id_Edit.setGeometry(QtCore.QRect(400, 90, 61, 22))
        self.delete_id_Edit.setObjectName("delete_id_Edit")
        self.price_Edit = QtWidgets.QLineEdit(self.centralwidget)
        self.price_Edit.setGeometry(QtCore.QRect(70, 100, 91, 22))
        self.price_Edit.setObjectName("price_Edit")
        self.brand_Edit = QtWidgets.QLineEdit(self.centralwidget)
        self.brand_Edit.setGeometry(QtCore.QRect(70, 40, 91, 22))
        self.brand_Edit.setObjectName("brand_Edit")
        self.company_Edit = QtWidgets.QLineEdit(self.centralwidget)
        self.company_Edit.setGeometry(QtCore.QRect(70, 10, 91, 21))
        self.company_Edit.setObjectName("company_Edit")
        self.new_price_Edit = QtWidgets.QLineEdit(self.centralwidget)
        self.new_price_Edit.setGeometry(QtCore.QRect(260, 90, 61, 22))
        self.new_price_Edit.setText("")
        self.new_price_Edit.setObjectName("new_price_Edit")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(220, 90, 41, 16))
        self.label_3.setObjectName("label_3")
        self.model_Edit = QtWidgets.QLineEdit(self.centralwidget)
        self.model_Edit.setGeometry(QtCore.QRect(70, 70, 91, 22))
        self.model_Edit.setObjectName("model_Edit")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 55, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(30, 40, 41, 16))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(30, 70, 41, 16))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(30, 100, 31, 16))
        self.label_7.setObjectName("label_7")
        self.export1_Button = QtWidgets.QPushButton(self.centralwidget)
        self.export1_Button.setGeometry(QtCore.QRect(40, 170, 171, 28))
        self.export1_Button.setObjectName("export1_Button")
        self.export2_Button = QtWidgets.QPushButton(self.centralwidget)
        self.export2_Button.setGeometry(QtCore.QRect(312, 170, 161, 28))
        self.export2_Button.setObjectName("export2_Button")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 210, 481, 271))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setColumnWidth(0, 115)
        self.tableWidget.setColumnWidth(1, 125)
        self.tableWidget.setColumnWidth(2, 125)
        self.tableWidget.setColumnWidth(3, 110)
        self.tableWidget.setHorizontalHeaderLabels(['company', 'brand', 'model', 'price'])
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.add_Button.setText(_translate("MainWindow", "Add"))
        self.update_Button.setText(_translate("MainWindow", "Update price"))
        self.delete_Button.setText(_translate("MainWindow", "Delete"))
        self.label.setText(_translate("MainWindow", "Row ID:"))
        self.label_2.setText(_translate("MainWindow", "Row ID:"))
        self.label_3.setText(_translate("MainWindow", "Price:"))
        self.label_4.setText(_translate("MainWindow", "Company"))
        self.label_5.setText(_translate("MainWindow", "Brand"))
        self.label_6.setText(_translate("MainWindow", "Model"))
        self.label_7.setText(_translate("MainWindow", "Price"))
        self.export1_Button.setText(_translate("MainWindow", "Export to DB2"))
        self.export2_Button.setText(_translate("MainWindow", "Export to DB3"))

    def add_functions(self):
        """
            main function
        """
        self.current_database = 'sqlite'

        self.sqlite_con = sqlite_connection('SQLite3DB')
        self.psql_con = psql_connection()
        psql_table_create(self.psql_con)
        # edit later maybe
        self.mysql_con = mysql_connection_to_server()
        mysql_database_name = 'mysql_db'
        mysql_create_database(mysql_database_name, self.mysql_con)
        self.mysql_con = mysql_connection_to_database(mysql_database_name)


        sqlite_table_create(self.sqlite_con)
        self.qt_table_update()

        self.add_Button.clicked.connect(lambda: self.database_insert())
        self.update_Button.clicked.connect(lambda: self.database_update())
        self.delete_Button.clicked.connect(lambda: self.database_delete_by_id())
        self.export1_Button.clicked.connect(lambda: self.export_sqlite_to_postgresql())
        self.export2_Button.clicked.connect(lambda: self.export_postgresql_to_mysql())

    def database_insert(self):
        company = self.company_Edit.text()
        brand = self.brand_Edit.text()
        model = self.model_Edit.text()
        price = self.price_Edit.text()

        # change later, error with 'letters' input ------
        columns_list = [company, brand, model, int(price) if price != '' else None]

        self.database_recognize(sqlite_insert(self.sqlite_con, columns_list))

        self.qt_table_update()

    def database_update(self):
        new_price = self.new_price_Edit.text()
        row_id = self.update_id_Edit.text()
        # add if self.current_database == "sqlite": else.............................................................
        self.database_recognize(sqlite_update(self.sqlite_con, int(row_id), int(new_price)))

        self.qt_table_update()

    def database_delete_by_id(self):
        row_id = self.delete_id_Edit.text()
        self.database_recognize(sqlite_delete_by_id(self.sqlite_con, int(row_id)))

        self.qt_table_update()

    def export_sqlite_to_postgresql(self):
        self.current_database = 'postgresql'
        export_list = sqlite_select(self.sqlite_con)
        for row in export_list:
            psql_insert(self.psql_con, row)

        self.qt_table_update()

    def export_postgresql_to_mysql(self):
        self.current_database = 'mysql'
        pass

    def qt_table_update(self):
        """
            function updates table in GUI
        """
        table_list = []
        if self.current_database == 'sqlite':
            table_list = sqlite_select(self.sqlite_con)
        elif self.current_database == 'postgresql':
            table_list = psql_select(self.psql_con)
        elif self.current_database == 'mysql':
            table_list = mysql_select(self.my)
        # uploading database table into PyQt Table
        table_row = 0
        self.tableWidget.setRowCount(len(table_list))
        for row in table_list:
            for i in range(len(row)):
                self.tableWidget.setItem(table_row, i, QtWidgets.QTableWidgetItem(str(row[i])))
            table_row += 1

    def database_recognize(self, sqlite_func):
        """
            function recognizes which functions to use for current DB
        """
        if self.current_database == 'sqlite':
            sqlite_func
        else:
            pass


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
